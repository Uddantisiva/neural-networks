#1.Single layer perceptron problem soliving 

#import libraries
import numpy as np
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt

#load the datasets
data=load_iris()
X=data.data[:100,:2]
y=data.target[:100]
y=np.where(y==0,-1,1)

#define a class perceptron
class Perceptron:
    def __init__ (self,lr =0.01,n_iter=50):
        self.lr=lr
        self.n_iter=n_iter
    def fit(self,X,y):
        self.weights_=np.zeros(1+X.shape[1])
        self.errors_=[]
        for _ in range(self.n_iter):
            errors=0
            for xi,target in zip (X,y):
                update=self.lr*(target - self.predict(xi))
                self.weights_[1:] += update*xi
                self.weights_[0] += update
                errors+=int(update!=0.0)
            self.errors_.append(errors)
        return self
    def net_input(self,X):
        return np.dot(X,self.weights_[1:])+self.weights_[0]
          
    def predict(self,X):
        return np.where(self.net_input(X)>=0.0,1,-1)
    
#train the perceptron
ppn = Perceptron(lr=0.1,n_iter=10)
ppn.fit(X,y)

#plot the results
plt.plot(range(1,len(ppn.errors_)+1),ppn.errors_,marker="o")
plt.xlabel("epochs")
plt.ylabel("number of updates")
plt.title("perceptron Training")
plt.show() 
